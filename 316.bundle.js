"use strict";(self.webpackChunkbundle_creator=self.webpackChunkbundle_creator||[]).push([[316],{1316:(e,a,t)=>{t.d(a,{offchainLookup:()=>k,offchainLookupSignature:()=>m});var r=t(5176),s=t(8463),n=t(1344),o=t(1163);class c extends n.C{constructor({callbackSelector:e,cause:a,data:t,extraData:r,sender:s,urls:n}){super(a.shortMessage||"An error occurred while fetching for an offchain result.",{cause:a,metaMessages:[...a.metaMessages||[],a.metaMessages?.length?"":[],"Offchain Gateway Call:",n&&["  Gateway URL(s):",...n.map((e=>`    ${(0,o.I)(e)}`))],`  Sender: ${s}`,`  Data: ${t}`,`  Callback selector: ${e}`,`  Extra data: ${r}`].flat(),name:"OffchainLookupError"})}}class d extends n.C{constructor({result:e,url:a}){super("Offchain gateway response is malformed. Response data must be a hex value.",{metaMessages:[`Gateway URL: ${(0,o.I)(a)}`,`Response: ${(0,s.A)(e)}`],name:"OffchainLookupResponseMalformedError"})}}class u extends n.C{constructor({sender:e,to:a}){super("Reverted sender address does not match target contract address (`to`).",{metaMessages:[`Contract address: ${a}`,`OffchainLookup sender address: ${e}`],name:"OffchainLookupSenderMismatchError"})}}var l=t(6595),i=t(5462),f=t(4531),h=t(4306),p=t(9873);var w=t(5419),y=t(6394);const m="0x556f1830",b={name:"OffchainLookup",type:"error",inputs:[{name:"sender",type:"address"},{name:"urls",type:"string[]"},{name:"callData",type:"bytes"},{name:"callbackFunction",type:"bytes4"},{name:"extraData",type:"bytes"}]};async function k(e,{blockNumber:a,blockTag:t,data:s,to:n}){const{args:o}=(0,i.W)({data:s,abi:[b]}),[d,l,y,m,k]=o,{ccipRead:C}=e,x=C&&"function"==typeof C?.request?C.request:g;try{if(!function(e,a){if(!(0,p.P)(e,{strict:!1}))throw new h.M({address:e});if(!(0,p.P)(a,{strict:!1}))throw new h.M({address:a});return e.toLowerCase()===a.toLowerCase()}(n,d))throw new u({sender:d,to:n});const s=await x({data:y,sender:d,urls:l}),{data:o}=await(0,r.T)(e,{blockNumber:a,blockTag:t,data:(0,w.xW)([m,(0,f.h)([{type:"bytes"},{type:"bytes"}],[s,k])]),to:n});return o}catch(e){throw new c({callbackSelector:m,cause:e,data:s,extraData:k,sender:d,urls:l})}}async function g({data:e,sender:a,urls:t}){let r=new Error("An unknown error occurred.");for(let n=0;n<t.length;n++){const o=t[n],c=o.includes("{data}")?"GET":"POST",u="POST"===c?{data:e,sender:a}:void 0;try{const t=await fetch(o.replace("{sender}",a).replace("{data}",e),{body:JSON.stringify(u),method:c});let n;if(n=t.headers.get("Content-Type")?.startsWith("application/json")?(await t.json()).data:await t.text(),!t.ok){r=new l.Ci({body:u,details:n?.error?(0,s.A)(n.error):t.statusText,headers:t.headers,status:t.status,url:o});continue}if(!(0,y.q)(n)){r=new d({result:n,url:o});continue}return n}catch(e){r=new l.Ci({body:u,details:e.message,url:o})}}throw r}}}]);